<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 阿晶</title>
    <link>/categories/algorithm/</link>
    <description>Recent content in algorithm on 阿晶</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Feb 2020 05:42:00 +0800</lastBuildDate><atom:link href="/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序算法</title>
      <link>/post/sort/</link>
      <pubDate>Sat, 29 Feb 2020 05:42:00 +0800</pubDate>
      
      <guid>/post/sort/</guid>
      <description>冒泡排序 大的元素往上冒 1 2 3 4 5 6 7 8 9 func bubblingSort(nums []int) { for i := 0; i &amp;lt; len(nums); i++ { for j := 0; j &amp;lt; len(nums)-i-1; j++ { if nums[j] &amp;gt; nums[j+1] { nums[j], nums[j+1] = nums[j+1], nums[j] } } } } 特点：稳定 选择排序 每次选择剩</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>/post/algorithm-dp/</link>
      <pubDate>Wed, 05 Feb 2020 15:34:43 +0800</pubDate>
      
      <guid>/post/algorithm-dp/</guid>
      <description>动态规划(Dynamic Programing)，通过解决存储子问题结果，迭代h解决整个问题 斐波纳切数列(fibbonacci) 1 0,1,1,2,3,5,8,13,21,34 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>/post/alogrithm-greedy/</link>
      <pubDate>Wed, 05 Feb 2020 15:32:55 +0800</pubDate>
      
      <guid>/post/alogrithm-greedy/</guid>
      <description>贪心算法（greedy algorithm）是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的</description>
    </item>
    
    <item>
      <title>全排序</title>
      <link>/post/algorithm-permute/</link>
      <pubDate>Wed, 05 Feb 2020 10:13:47 +0800</pubDate>
      
      <guid>/post/algorithm-permute/</guid>
      <description>全排序一 给定一个没有重复数字的序列，返回其所有可能的全排列。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 输入: [1,2,3] 输出: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]</description>
    </item>
    
  </channel>
</rss>
